#!/usr/bin/gawk -E

# See https://arctos.database.museum/info/api.cfm

@load "json"
@include "arctos_pw.awk"

BEGIN{
  config()
  read_args()
  
  if (FUNC == "sql")
    sql("user")
  else if (FUNC == "about_api")
    about_api()
  else if (FUNC == "alaac2guid")
    alaac2guid()
  else if (FUNC == "guid2alaac")
    guid2alaac()
  else if (FUNC == "imagesync")
    imagesync()
  else
    exit 1

  exit 0
  
  # METHOD = "getCatalogData" # "about"
  # QUERY = "&queryformat=struct&guid=UAM:Herb:100000" \
  #   "&COLS=guid,media,scientific_name"
  # RAW = 0
  # api()

  # for (i in Data["DATA"]) {
  #   for (j in Data["DATA"][i])
  #     print j " : " Data["DATA"][i][j]
  #   if (Data["DATA"][i]["media"]) {
  #     json::from_json(Data["DATA"][i]["media"], Media)
  #     for (k in Media)
  #       if (Media[k]["MT"] == "image/jpeg") {
  #         print "  > " Media[k]["MU"]
  #         system("firefox " Media[k]["MU"])
  #       }
  #   }
  # }
}

function read_args(    arg) {
  # Defaults
  
  for (arg = 1; arg < ARGC; arg++) {
    if      (ARGV[arg] == "-a"    )  ACCN   = ARGV[++arg]
    else if (ARGV[arg] == "-d"    )  INLINE    = ARGV[++arg]
    else if (ARGV[arg] == "-f"    )  FILE   = ARGV[++arg]
    else if (ARGV[arg] ~ "^(sql|about_api|alaac2guid|guid2alaac|imagesync)$")
      FUNC   = ARGV[arg]
    else if (ARGV[arg] == "-r"    )  RAW = 1 
    else if (ARGV[arg] == "-c"    )  CURL = 1 
  }

  # checks
  if (FUNC ~ /^(sql|alaac|imagesync)$/) {
    if (INLINE && FILE)
      err("both commandline data/sql and file given")
    else if (!INLINE && !FILE)
      err("neither commandline data/sql nor file given")
  }
}

function config() {
  PROCINFO["sorted_in"] = "@ind_num_asc"
  OFS= "|"
  api_key()
}

function api(     cmd, json, i) {
  # "--header 'Accept-Encoding: gzip' "
  cmd = "curl -s --header 'Accept: application/json' "               \
    "'https://arctos.database.museum/component/api/v2/catalog.cfc' " \
    "--data 'api_key=" API_KEY "' "
  for (i in Q)
    cmd = cmd "--data '" i "=" Q[i] "' "
  
  if (CURL) {
    print cmd
    exit 0
  }
  cmd | getline json 
  close(cmd)

  if (RAW)
    print json
  
  if (! json::from_json(json, Data)) {
    print "JSON import failed!" > "/dev/stderr"
    exit 1
  }

  if (RAW) {
    walk_array(Data, "Data")
    exit 0
  }
}

function walk_array(arr, name,      i)  {
  # from https://www.gnu.org/software/gawk/manual/html_node/
  #              Walking-Arrays.html#Walking-Arrays
  for (i in arr) {
    if (isarray(arr[i]))
      if (i ~ /^[0-9]+$/)
        walk_array(arr[i], (name "[" i "]"))
      else
        walk_array(arr[i], (name "[\"" i "\"]"))
    else
      if (i ~ /^[0-9]+$/)
        printf("%s[%s] = %s\n", name, i, arr[i])
      else
        printf("%s[\"%s\"] = %s\n", name, i, arr[i])
  }
}

function sql(sqlin,    cmd) {

  # if (!ENVIRON["ARCTOS_CFID"])
  #   err("Set ARCTOS_CFID shell variable first: `export ARCTOS_CFID=...`")
  if (!CFID)
    err("Set CFID in arctos_pw.awk first; read it using browser's Inspector")

  if (sqlin == "user") {
    if (FILE)
      while (getline < FILE)
        sqlin = $0
    else
      sqlin = INLINE
  }
  
  if (sqlin !~ /(SELECT|select)/)
    err("SQL statement must contain one or more SELECT statement")

  cmd = "curl -s -L 'https://arctos.database.museum/tools/userSQL.cfm' " \
    "-H 'Cookie: cfid=" CFID "; cftoken=0' "          \
    "--data 'action=run' "                                              \
    "--data 'format=csv' "                                              \
    "--data-urlencode \"sqltxt=" sqlin "\""
  
  if (CURL) {
    print cmd
    exit 0
  }

  # system(cmd)
  
  RS="\x04";
  cmd | getline csv
  # bad connection
  if (!csv)
    err("nothing back from Arctos... connection down?")
  
  # print csv
  # exit
  # csv2psv(csv)
  csv2data(csv)
}

function err(msg) {
  print "ERROR: " msg > "/dev/stderr"
  exit 1
}

function csv2psv(csv,    line, lines, field, fields, i, j) {
  lines = split(csv, line, "\r?\n")
  for (i = 1; i <= lines; i++) {
    fields = patsplit(line[i], field, "([^,]*)|(\"([^\"]|\"\")+\")")
    for (j = 1; j < fields; j++)
      printf "%s|", csvclean(field[j])
    printf "%s\n", csvclean(field[fields])
  }
}

function csv2data(csv,    line, field, fields, i, j) {
  delete Sqldata
  Sqllines = split(csv, line, "\r?\n")
  for (i = 1; i <= Sqllines; i++) {
    fields = patsplit(line[i], field, "([^,]*)|(\"([^\"]|\"\")+\")")
    for (j = 1; j <= fields; j++)
      Sqldata[i][j] = csvclean(field[j])
  }
}

function csvclean(t) {
  gsub(/^"/,"",t)
  gsub(/"$/,"",t)
  gsub(/""/,"\"",t)
  gsub(/\|/,"{PIPE}",t)
  return t
}
  
function about_api() {
  Q["method"] = "about"
  api()
  walk_array(Data, "Data")
}

function uniq(idtype,       id, list, tmp, i, j, alaac) {
  # create query list 'list' and identifer array 'id'
  if (FILE) {
    RS="\n"
    while (getline < FILE) {
      id[$0]
      list = list $0 ","
    }
    gsub(/,$/,"",list)
    RS="\x04";
  }
  else {
    list = INLINE
    split(list,tmp,",")
    for (i in tmp)
      id[tmp[i]]
  }
  
  Q["method"] = "getCatalogData"
  Q["oidtype"] = idtype
  Q["oidnum"] = list
  Q["COLS"] = "guid,othercatalognumbers,description"
  api()

  # parse results
  for (i in Data["DATA"]["DATA"]) {
    alaac = gensub(/.*ALAAC ([VLBA]?[0-9]+).*/,"\\1","G",   \
                   Data["DATA"]["DATA"][i][3])
    id2guid[alaac][length(id2guid[alaac])+1] = Data["DATA"]["DATA"][i][2]
  }

  # output
  for (i in id) {
    printf "%s|", i
    if(i in id2guid) {
      printf "%s|", id2guid[i][1]
      if (length(id2guid[i])>1)
        for (j = 2; j <= length(id2guid[i]); j++)
          printf "%s;", id2guid[i][j]
    }
    else
      printf "|"
    
    printf "\n"
  }
  exit 0
}

function alaac2guid() {
  
  sql("SELECT coll_obj_other_id_num.display_value AS alaac, "\
      "  STRING_AGG(guid,',') AS guid "\
      "FROM flat, coll_obj_other_id_num "\
      "WHERE flat.collection_object_id = "\
      "    coll_obj_other_id_num.collection_object_id "\
      "  AND coll_obj_other_id_num.other_id_type = 'ALAAC' "\
      "  AND display_value IN (" idlist("sql") ") "\
      "GROUP BY display_value "\
      "ORDER BY alaac;")
  for (i in Id) {
    found = 0
    for (j in Sqldata)
      if (i == Sqldata[j][1]) {
        print i "|" Sqldata[j][2]
        found = 1
        break
      }
    if (!found)
      print i "|"
  }
}

function guid2alaac() {
  
  sql("SELECT guid, "\
      "  STRING_AGG(coll_obj_other_id_num.display_value,',') AS ALAAC "\
      "FROM flat, coll_obj_other_id_num "\
      "WHERE flat.collection_object_id = "\
      "    coll_obj_other_id_num.collection_object_id "\
      "  AND coll_obj_other_id_num.other_id_type = 'ALAAC' "\
      "  AND guid IN (" idlist("sql") ") "\
      "GROUP BY guid "                    \
      "ORDER BY guid;")
  for (i in Id) {
    found = 0
    for (j in Sqldata)
      if (i == Sqldata[j][1]) {
        print i "|" Sqldata[j][2]
        found = 1
        break
      }
    if (!found)
      print i "|"
  }
}


function idlist(method,     list) {  
  # create query list 'list' and identifer array 'id'
  if (FILE) {
    RS="\n"
    while (getline < FILE) {
      if ($0 in Id)
        err("Key: '" $0 "' a duplicate") 
      Id[$0]
      if (method == "sql")
        list = list "'" $0 "',"
      else
        list = list $0 ","
    }
    gsub(/,$/,"",list)
    RS="\x04";
  }
  else {
    split(INLINE,tmp,",")
    for (i in tmp) {
      if (tmp[i] in Id)
        err("Key: '" tmp[i] "' a duplicate") 
      Id[tmp[i]]
    }
    if (method == "sql")
      list = "'" gensub(/,/,"','", "G", INLINE) "'"
    else
      list = INLINE
  }
  return list
}

function imagesync() {
  RS="\n"
  FS="/"
  PROCINFO["sorted_in"] = "@ind_str_asc"
  while (getline < IMAGELIST) {
    # this will store only the most recent, in case there are 1+ versions:
    if (tolower($2) ~ /\.jpe?g$/) {
      locn[$2]["image/jpeg"] = $0
      # id[gensub(/\..+$/,"","G",$2)]
    }
    else if (tolower($2) ~ /\.dng$/) {
      locn[$2]["image/dng"] = $0
      # id[gensub(/\..+$/,"","G",$2)]
    }
  }
  
  # for (i in id)
  #   list = list "'" i "',"
  # gsub(/,$/,"",list)
  
  sql("SELECT sheet.barcode, flat.guid, M.mime_type "                   \
      "FROM container AS sheet "                                        \
      "JOIN container AS plant "                                        \
      "  ON plant.parent_container_id = sheet.container_id "            \
      "JOIN coll_obj_cont_hist AS cont_part_link "                      \
      "  ON cont_part_link.container_id = plant.container_id "          \
      "JOIN specimen_part "                                             \
      "  ON cont_part_link.collection_object_id = "                     \
      "     specimen_part.collection_object_id "                        \
      "JOIN flat "                                                      \
      "  ON specimen_part.derived_from_cat_item = flat.collection_object_id " \
      "LEFT JOIN ( "                                                    \
      "SELECT media_relations.cataloged_item_id, media.mime_type "      \
      "FROM media_relations, media "                                    \
      "WHERE media_relationship = 'shows cataloged_item' "              \
      "AND media.media_id = media_relations.media_id "                  \
      "AND media.mime_type IN ('image/dng','image/jpeg')) AS M "        \
      "ON M.cataloged_item_id = flat.collection_object_id "             \
      "WHERE sheet.barcode IN (" idlist("sql") "); ")

  print "** EXISTING **\n"
  for (i in Id) {
    found = 0
    print Sqllines
    for (j = 1; j <= Sqllines; j++) {
      print j
      if (Sqldata[j][1] == i) {
        print i "|" Sqldata[j][2] "|" Sqldata[j][3]
        # store for bulkload loop
        # note, in rare cases a barcode may have 2 guids
        bc2guid[i] = Sqldata[j][2]
        if (Sqldata[j][3])
          guidhasimg[i][Sqldata[j][3]]
        found = 1
      }
    }
    if (!found)
      print i "||"
  }

  print "\n** BULKLOADER **\n"
  OFS=","
  # check barcodes with guid
  for (i in bc2guid) {
    print i "|" loc[i]["image/dng"]
    # if there is no linked image, but it exists at TACC
    if (!("image/dng" in guidhasimg[i]) &&
        ("image/dng" in loc[i]))
      print bc2guid[i], "image/dng", loc[i]["image/dng"]
    if(!("image/jpeg" in guidhasimg[i]) &&
       ("image/jpeg" in loc[i]))
      print bc2guid[i], "image/jpeg", loc[i]["image/jpeg"]
  }
}
